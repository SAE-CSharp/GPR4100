// This code is an example of how you might create a leaderboard for a game that has a
// scoring system. It's done in a way that doesn't need you to have a set size to the
// leaderboard, which is generally a good approach when creating code that you might
// reuse elsewhere - being able to easily fit a piece of generally written code to
// anywhere it may be useful is very handy!

// NOTE: I'm not putting this here for you to copy-paste as-is! This is an example of
// how to approach something like this, so that you can use it as a basis for making your
// own things! Be creative - there are lots of ways this approach can be used!

using System;

namespace ExampleCode_Leaderboard
{
    class Program
    {
        static void Main(string[] args)
        {
            // First we need to declare a new array to act as the leaderboard - we want
            // the top 5 scores, so the array needs to have a size of 5. I have also
            // declared a variable is 1 less than the size of the array, to make it
            // possible to set the size of the leaderboard to anything you want.
            
            int[] leaderboard = new int[5];
            
            int maxIndex = leaderboard.Length - 1;

            // We now need to declare variables to store a new score input by the user,
            // to hold any score it will be checked against, and to note the leaderboard
            // position to place the new score in. Values don't have to be set when the
            // variables are declared, but I do it just to be sure.

            int scoreNew = 0, scoreCheck = 0, newPos = 6;

            // If we contain the bulk of the program within a while loop where the
            // condition is just the boolean value "true", it will keep running until
            // it receives a user input telling it to exit the loop. Variables that you
            // want to be accessible throughout the program should always be declared
            // outside any loops, functions, and so on, otherwise they'll only exist
            // while that piece of code is running.

            while (true)

            {

                // Setting default values for certain variables at the start of a loop
                // just helps prevent things from behaving in unwanted ways if you set
                // up your code a tiny bit wrong.

                scoreNew = 0;
                scoreCheck = 0;
                newPos = maxIndex + 2;

                // We need to store a score input now to check whether to add it to the
                // leaderboard. This code could be added to the end of an actual game to
                // give that game a leaderboard, in which case, you wouldn't need to ask
                // the user to input the score, as it would be generated by playing the
                // game. In this case, I'm making it so that entering a score of 0 will
                // exit the loop and terminate the program.

                Console.WriteLine("Please input your score.\n(To exit, enter a score of 0.)");
                scoreNew = Int32.Parse(Console.ReadLine());
                Console.WriteLine("\n");

                if (scoreNew <= 0)
                { break; }

                // The following for loop compares the score input against the scores in
                // the leaderboard. Since there's a possibility that the new score will
                // be higher than the highest score in the leaderboard, which would make
                // the loop run forever, we need to include an if statement with a break
                // to ensure the loop terminates.

                for (int i = maxIndex; scoreNew >= scoreCheck; i--)
                {
                    // The reason we set the loop's local integer to decrease is that we
                    // can use that integer as the index of the leaderboard array when
                    // getting the score to check the new score against from the array,
                    // and we want to go from last place to first place.
                    
                    scoreCheck = leaderboard[i];
                    if (scoreCheck > scoreNew)
                    {
                        newPos = (i + 1);
                    }

                    if (i == 0 && scoreCheck < scoreNew)
                    {
                        newPos = 0;
                        break;
                    }
                }

                // In the event that the new score is high enough to get onto the
                // leaderboard, the next loop effectively shifts the scores that are
                // lower than the new score down by one place to make room for it. This
                // can easily be done by setting one value in the array from the value
                // before it!

                for (int i = maxIndex; i > newPos; i--)
                {
                    leaderboard[i] = leaderboard[i - 1];
                }

                // We only want the program to try to set a new leaderboard value if the
                // new score got onto the leaderboard, so we put that line of code inside
                // an if statement that only exectues if the leaderboard position of the
                // new score would need to be displayed.

                if (newPos < leaderboard.Length)
                {
                    leaderboard[newPos] = scoreNew;
                }

                // Now that we've taken a new score in, and adjusted the leaderboard
                // appropriately (or not at all), we can display the leaderboard! I also
                // decided to display the score the user just entered. A for loop can be
                // used for this, as once again we can use its local variable as the
                // index of the value we want to pull from the array. Bear in mind that
                // if you want to display the position of the scores as numbers starting
                // from 1, you'll need to add 1 to the local variable, as the indices
                // always start from 0.

                // A quick note: you can use "Console.Clear();" to wipe all the text from
                // the console while the program is still running! Quite helpful for
                // keeping it looking clean on the user end.

                Console.Clear();
                Console.WriteLine("New score: " + scoreNew + "\n");
                Console.WriteLine("-- LEADERBOARD --");
                for (int i = 0; i < 5; i++)
                {
                    if (leaderboard[i] > 0)
                    {
                        Console.WriteLine("  " + (i + 1) + ": " + leaderboard[i]);
                    }
                }

                Console.WriteLine("");

            }
        }
    }
}
